
windows下的socket网络编程
clinet.c 客户端
server.c 服务器端
UDP通信的实现
代码如下
已经很久没有在windows下编程了，这次因为需要做一个跨平台的网络程序，就先写了个简单的winSocket网路通信的例子，以便以后用到的时候有个参考。

windows下使用winsock编程与linux/unix的区别在于windows下需要先有一个初始化的操作，结束的时候需要一个清理的操作。还有windows下编译的时候需要连接ws32_lib库。

大致过程如下

1、初始化

/*加载Winsock DLL*/
WSADATA wsd;
if (WSAStartup(MAKEWORD(2 , 2) , &wsd) != 0) {
printf("Winsock 初始化失败!\n");
return 1;
}

2、socket相关函数调用

socket(...)
bind(...)
listen(...)
connect(...)
accept(...)
send/sendto
recv/recvfrom

3、清理
WSACleanup();

clinet.c 客户端#
客户端的流程很简单。

1、先是使用socket函数产生一个打开的socket文件描述符。
2、使用connect函数去连接服务端
3、使用read/recv等读文件函数从服务端接收数据，使用write/send等写文件的函数向服务端发送数据
上面是典型的TCP编程流程，如果是UDP的话不需要connect去连接服务端直接使用sendto函数来发送数据，使用recvfrom接收来自服务器的数据

server.c 服务器端#
服务器端的流程比客户端稍微复杂一点

1、调用socket打开一个socket句柄
2、调用bind来绑定socket句柄到一个网口的某个端口
3、调用listen来设置(启用)监听
4、调用accept来等待客户端的连接
上面是典型的TCP编程流程，如果是UDP的，那么不需要3,4这两部，直接使用recvfrom来接收客户端发过来的数据即可。

UDP通信的实现#
我这里没有写TCP的，因为都是局域网内，就简单的写了个。
这里是在虚拟机里面测试的截图，代码见最后。



 

代码如下#
这是TCP的，UDP的就不贴了。

复制代码
#include <winsock2.h>
#include <stdio.h>
#include <stdlib.h>

#pragma comment(lib , "ws2_32.lib")

#define BUFSIZE 4096 /*缓冲区大小*/

int main_client(int argc , char *argv[])
{
    WSADATA wsd;
    SOCKET sClient;
    char Buffer[BUFSIZE];
    int ret;
    struct sockaddr_in server;
    unsigned short port;
    struct hostent *host = NULL;

    if (argc < 3) {
        printf("Usage:%s IP Port\n" , argv[0]);
        return -1;
    }


    /*加载Winsock DLL*/
    if (WSAStartup(MAKEWORD(2 , 2) , &wsd) != 0) {
        printf("Winsock    初始化失败!\n");
        return 1;
    }

    /*创建Socket*/
    sClient = socket(AF_INET , SOCK_STREAM , IPPROTO_TCP);
    if (sClient == INVALID_SOCKET) {
        printf("socket() 失败: %d\n" , WSAGetLastError());
        return 1;
    }
    /*指定服务器地址*/
    server.sin_family = AF_INET;
    port = atoi(argv[2]);
    server.sin_port = htons(port);
    server.sin_addr.s_addr = inet_addr(argv[1]);

    if (server.sin_addr.s_addr == INADDR_NONE) {
        host = gethostbyname(argv[1]);    //输入的地址可能是域名等
        if (host == NULL) {
            printf("无法解析服务端地址: %s\n" , argv[1]);
            return 1;
        }
        CopyMemory(&server.sin_addr ,
                    host->h_addr_list[0] ,
                    host->h_length);
    }
    /*与服务器建立连接*/
    if (connect(sClient , (struct sockaddr*)&server ,
                    sizeof(server)) == SOCKET_ERROR) {
        printf("connect() 失败: %d\n" , WSAGetLastError());
        return 1;
    }

    /*发送、接收消息*/

    for (;;) {
        //从标准输入读取要发送的数据
        //gets_s(Buffer,BUFSIZE);
        gets(Buffer);
        //向服务器发送消息
        ret = send(sClient , Buffer , strlen(Buffer) , 0);
        if (ret == 0) {
            break;
        }
        else if (ret == SOCKET_ERROR) {
            printf("send() 失败: %d\n" , WSAGetLastError());
            break;
        }
        printf("Send %d bytes\n" , ret);
        //接收从服务器来的消息
        ret = recv(sClient , Buffer , BUFSIZE , 0);
        if (ret == 0) {
            break;
        }
        else if (ret == SOCKET_ERROR) {
            printf("recv() 失败: %d\n" , WSAGetLastError());
            break;
        }
        Buffer[ret] = '\0';
        printf("Recv %d bytes:\n\t%s\n" , ret , Buffer);

    }
    //用完了，关闭socket句柄(文件描述符)
    closesocket(sClient);
    WSACleanup();    //清理
    return 0;
}


  1 #include <winsock2.h>
  2 #include <stdio.h>
  3 #include <stdlib.h>
  4 
  5 #pragma comment(lib , "ws2_32.lib")
  6 
  7 
  8 #define DEFAULT_BUFFER 4096 /*缓冲区大小*/
  9 
 10 
 11 /*与客户机通信的线程函数*/
 12 DWORD WINAPI ClientThread(LPVOID lpParam)
 13 {
 14     SOCKET sock = (SOCKET)lpParam;
 15     char Buffer[DEFAULT_BUFFER];
 16     int ret , nLeft , idx;
 17     while (1) {
 18         /*接收来自客户机的消息*/
 19         ret = recv(sock , Buffer , DEFAULT_BUFFER , 0);
 20         if (ret == 0)
 21             break;
 22         else if (ret == SOCKET_ERROR) {
 23             printf("recv() 失败: %d\n" , WSAGetLastError());
 24             break;
 25         }
 26         Buffer[ret] = '\0';
 27         printf("Recv: %s\n" , Buffer);    //打印接收到的消息
 28 
 29 
 30         nLeft = ret;
 31         idx = 0;
 32         while (nLeft > 0) {
 33             /*向客户机发送回应消息*/
 34             ret = send(sock , &Buffer[idx] , nLeft , 0);
 35             if (ret == 0)
 36                 break;
 37             else if (ret == SOCKET_ERROR) {
 38                 printf("send() 失败: %d\n" , WSAGetLastError());
 39                 break;
 40             }
 41             nLeft -= ret;
 42             idx += ret;
 43         }
 44     }
 45     return 0;
 46 }
 47 
 48 int main_server(int argc , char **argv)
 49 {
 50     WSADATA        wsd;
 51     HANDLE        hThread;
 52     DWORD        dwThread;
 53     SOCKET        sListen , sClient;
 54     int            AddrSize;
 55     unsigned short port;
 56     struct sockaddr_in local , client;
 57 
 58     if (argc < 2) {
 59         printf("Usage:%s Port\n" , argv[0]);
 60         return -1;
 61     }
 62 
 63     /*加载Winsock DLL*/
 64     if (WSAStartup(MAKEWORD(2 , 2) , &wsd) != 0) {
 65         printf("WinSock 初始化失败!\n");
 66         return 1;
 67     }
 68 
 69     /*创建Socket*/
 70     sListen = socket(AF_INET , SOCK_STREAM , IPPROTO_IP);
 71     if (sListen == SOCKET_ERROR) {
 72         printf("socket() 失败: %d\n" , WSAGetLastError());
 73         return 1;
 74     }
 75 
 76     local.sin_family = AF_INET;
 77     local.sin_addr.s_addr = htonl(INADDR_ANY);
 78     port = atoi(argv[1]);    //获取端口值
 79     local.sin_port = htons(port);
 80 
 81     /*绑定Socket*/
 82     if (bind(sListen ,
 83         (struct sockaddr*)&local ,
 84         sizeof(local)) == SOCKET_ERROR) {
 85         printf("bind() 失败: %d\n" , WSAGetLastError());
 86         return 1;
 87     }
 88     /*打开监听*/
 89     listen(sListen , 8);
 90 
 91     /*在端口进行监听，一旦有客户机发起连接请示
 92     就建立与客户机进行通信的线程*/
 93     while (1) {
 94         AddrSize = sizeof(client);
 95         /*监听是否有连接请求*/
 96         sClient = accept(sListen ,
 97                          (struct sockaddr*)&client ,
 98                          &AddrSize);
 99         if (sClient == INVALID_SOCKET) {
100             printf("accept() 失败: %d\n" , WSAGetLastError());
101             break;
102         }
103         printf("接受客户端连接: %s:%d\n" ,
104                inet_ntoa(client.sin_addr) ,
105                ntohs(client.sin_port));
106 
107         //创建一个线程去处理
108         hThread = CreateThread(NULL , 0 , ClientThread ,
109                                (LPVOID)sClient , 0 , &dwThread);
110 
111         if (hThread == NULL) {
112             printf("CreateThread() 失败: %d\n" , GetLastError());
113             break;
114         }
115         //处理完后关闭
116         CloseHandle(hThread);
117     }
118     closesocket(sListen);
119     WSACleanup();    //用完了要清理
120     return 0;
121 }
复制代码
测试代码(main)

复制代码
 1 extern int main_client(int , char**);
 2 extern int main_server(int , char**);
 3 
 4 int main(int c , char** v)
 5 {
 6     if (c == 3) {
 7         main_client(c , v);
 8     }
 9     else {
10         main_server(c , v);
11     }
12     return 0;
13 
14 }





Win Socket网络编程

原料：#include <winsock2.h>

关键API函数：

1.int WSAStartup( wVersionRequested, &wsaData );

  Description:   搜索、绑定相应的Socket库

  Input parameters: wVersionRequested —— WinSocket版本

                    wsaData —— 指向WinSocket资料的指针

  Return Value: 0      if successful;

                Error  if failed.

2.int WSACleanup (void); 

  Description: 解除Socket库绑定并释放Socket库所占系统资源

 

3.SOCKET PASCAL FAR socket(int af,int type,int procotol);

  Description: 创建套接字
 Input parameters：af —— 通信发生的区域
                   type —— 要建立的套接字类型
                   procotol —— 使用的特定协议

4.int bind(SOCKET s, const struct sockaddr* name, int namelen);功能：将套接字地址与所创建的套接字号联系起来。
参数：第一个参数，指定需要绑定的套接字；

   第二个参数，指定该套接字的本地地址信息

   第三个参数，指定该网络协议地址的长度

5.int listen(SOCKET s, int backlog);

// 第一个参数,指定需要设置的套接字

// 第二个参数,等待连接队列的最大长度

6.SOCKET accept( SOCKET s,struct sockaddr* addr,int* addrlen);

// 第一个参数，接收一个处于监听状态下的套接字

// 第二个参数，sockaddr用于保存客户端地址的信息

// 第三个参数，用于指定这个地址的长度

// 返回监听状态下的套接字通信的套接字

7.int send( SOCKET s,  const char* buf,  int len,  int flags);

// 第一个参数，需要发送信息的套接字

// 第二个参数，包含了需要被传送的数据

// 第三个参数，buffer的数据长度

// 第四个参数，一些传送参数的设置

8.int recv(  SOCKET s,  char* buf,  int len,  int flags);

// 第一个参数，建立连接后的套接字，

// 第二个参数，接收数据

// 第三个参数，接收数据的长度，

// 第四个参数，一些传送参数的设置

9.int connect(int sockfd,struct sockaddr * serv_addr,int addrlen);
用于客户端建立tcp连接。

 

//参数：sockfd：标识一个套接字。
//serv_addr：套接字s想要连接的主机地址和端口号。
//addrlen：name缓冲区的长度。

10.closesocket(SOCKET s);//关闭套接字

代码如下：

1.服务器程序

//Sever.cpp
#include <iostream>
#include <cstdio>
#include <Winsock2.h>
 
using namespace std;
 
int main()
{   // 加载socket动态链接库(dll)
	WORD wVersionRequested;//使用的WinSock版本号
	WSADATA wsaData;       //Windows Socket资料
	int err;               //WSAStartup函数返回值
	wVersionRequested = MAKEWORD( 2, 2 );           //使用WinSock2.2版本
	err = WSAStartup( wVersionRequested, &wsaData );//绑定WinSocket动态库
	if ( err != 0 )
	{
		cout<<"Error：socket动态链接库绑定失败！"<<endl;
		return -1;
	}
	if ( LOBYTE( wsaData.wVersion ) != 2 ||	HIBYTE( wsaData.wVersion ) != 2 )
	{                 // 检查低字节=2？高字节=2？确定是否为请求的2.2版本
		WSACleanup( );// 否则的话，调用WSACleanup()清除信息，解除库绑定
		return -1;
	}
	SOCKET sockSrv = socket(AF_INET, SOCK_STREAM, 0);    //创建套接字
	SOCKADDR_IN addrSrv;    //地址结构
	addrSrv.sin_addr.S_un.S_addr = htonl(INADDR_ANY);
	addrSrv.sin_family = AF_INET;
	addrSrv.sin_port = htons(6000);
	bind(sockSrv, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR));//连接套接字
	listen(sockSrv, 10);    //通知TCP服务器准备好接收连接
	SOCKADDR_IN  addrClient;//客户端地址信息
	int len = sizeof(SOCKADDR);
	while(true)
	{   //不断等待客户端请求的到来
		SOCKET sockConn = accept(sockSrv, (SOCKADDR*)&addrClient, &len);
		char sendBuf[100];              //发送信息字符缓冲区
		sprintf(sendBuf, "服务器SEVER已连接...\n"),inet_ntoa(addrClient.sin_addr);
		printf("客户端IP地址:%s\n",inet_ntoa(addrClient.sin_addr));
		send(sockConn, sendBuf, strlen(sendBuf)+1, 0);//向客户端发送信息
		char recvBuf[100];              //接收信息字符缓冲区
		recv(sockConn, recvBuf, 100, 0);//从客户端接收信息
		printf("%s\n", recvBuf);        //显示客户端发送的信息
		char * sockConnName = "Client";
		printf("我们可以聊五句话");
		int n = 5;
		while(n--){
			printf("还剩%d次：\n", n+1);
			char recvBuf[100];
			recv(sockConn, recvBuf, 100, 0);
			printf("%s Says: %s\n", sockConnName, recvBuf);		// 接收信息
 
			char talk[100];
			printf("Please enter what you want to say next(\"quit\"to exit):");
			gets(talk);
			send(sockConn, talk, strlen(talk)+1, 0);			// 发送信息
			printf("\n");
		}
		printf("\nEnd talking... \n");
		closesocket(sockConn);//关闭套接字
	}
 
	printf("\n");
	system("pause");
	return 0;
}
2.客户端程序
// client.cpp
#include <iostream>
#include <cstdio>
#include <Winsock2.h>
using namespace std;
int main()
{   //加载socket动态链接库(dll)
	WORD wVersionRequested;//使用的WinSock版本号
	WSADATA wsaData;       //Windows Socket资料
	int err;               //WSAStartup函数返回值
	wVersionRequested = MAKEWORD( 2, 2 );           //使用WinSock2.2版本
	err = WSAStartup( wVersionRequested, &wsaData );//绑定WinSocket动态库
	if ( err != 0 )
	{
		cout<<"Error：socket动态链接库绑定失败！"<<endl;
		return -1;
	}
	if ( LOBYTE( wsaData.wVersion ) != 2 ||	HIBYTE( wsaData.wVersion ) != 2 )
	{                 // 检查低字节=2？高字节=2？确定是否为请求的2.2版本
		WSACleanup( );// 否则的话，调用WSACleanup()清除信息，解除库绑定
		return -1;
	}
	SOCKET sockClient = socket(AF_INET, SOCK_STREAM, 0);
	SOCKADDR_IN addrSrv;
	addrSrv.sin_addr.S_un.S_addr = inet_addr("10.22.32.67");//本地IP地址：10.22.32.67
	addrSrv.sin_family = AF_INET;
	addrSrv.sin_port = htons(6000);
	err=connect(sockClient, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR));//建立TCP连接
    if ( err != 0 )
	{
		cout<<"Error：TCP连接失败！"<<endl;
		return -1;
	}
	char recvBuf[100];
	recv(sockClient, recvBuf, 100, 0);
	printf("%s\n", recvBuf);
 
	send(sockClient,"客户端Client已连接...\n", strlen("客户端Client已连接...\n")+1, 0);
	printf("我们可以聊五句话");
	int n = 5;
	do{
		printf("\n还剩%d次：", n);
		char talk[100];
		printf("\nPlease enter what you want to say next(\"quit\"to exit):");
		gets(talk);
		send(sockClient, talk, strlen(talk)+1, 0);			// 发送信息
 
		char recvBuf[100];
		recv(sockClient, recvBuf, 100, 0);
		printf("%s Says: %s\n", "Server", recvBuf);		// 接收信息
	}while(--n);
 
	printf("End linking...\n");
	closesocket(sockClient);
	WSACleanup();	// 终止对套接字库的使用
 
	printf("\n");
	system("pause");
	return 0;
}
 
 
 
 
 



Socket网络编程 详细过程（转）
我们深谙信息交流的价值，那网络中进程之间如何通信，如我们每天打开浏览器浏览网页时，浏览器的进程怎么与web服务器通信的？当你用QQ聊天时，QQ进程怎么与服务器或你好友所在的QQ进程通信？这些都得靠socket？那什么是socket？socket的类型有哪些？还有socket的基本函数，这些都是本文想介绍的。本文的主要内容如下：

1、网络中进程之间如何通信？
2、Socket是什么？
3、socket的基本操作
3.1、socket()函数
3.2、bind()函数
3.3、listen()、connect()函数
3.4、accept()函数
3.5、read()、write()函数等
3.6、close()函数
4、socket中TCP的三次握手建立连接详解
5、socket中TCP的四次握手释放连接详解
6、一个例子（实践一下）
7、留下一个问题，欢迎大家回帖回答！！！
1、网络中进程之间如何通信？
本地的进程间通信（IPC）有很多种方式，但可以总结为下面4类：

消息传递（管道、FIFO、消息队列）
同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）
共享内存（匿名的和具名的）
远程过程调用（Solaris门和Sun RPC）
但这些都不是本文的主题！我们要讨论的是网络中进程之间如何通信？首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！在本地可以通过进程PID来唯一标识一个进程，但是在网络中这是行不通的。其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“ip地址”可以唯一标识网络中的主机，而传输层的“协议+端口”可以唯一标识主机中的应用程序（进程）。这样利用三元组（ip地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。

使用TCP/IP协议的应用程序通常采用应用编程接口：UNIX  BSD的套接字（socket）和UNIX System V的TLI（已经被淘汰），来实现网络进程之间的通信。就目前而言，几乎所有的应用程序都是采用socket，而现在又是网络时代，网络中进程通信是无处不在，这就是我为什么说“一切皆socket”。

2、什么是Socket？
上面我们已经知道网络中的进程是通过socket来通信的，那什么是socket呢？socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，都可以用“打开open –> 读写write/read –> 关闭close”模式来操作。我的理解就是Socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭），这些函数我们在后面进行介绍。

socket一词的起源
在组网领域的首次使用是在1970年2月12日发布的文献IETF RFC33中发现的，撰写者为Stephen Carr、Steve Crocker和Vint Cerf。根据美国计算机历史博物馆的记载，Croker写道：“命名空间的元素都可称为套接字接口。一个套接字接口构成一个连接的一端，而一个连接可完全由一对套接字接口规定。”计算机历史博物馆补充道：“这比BSD的套接字接口定义早了大约12年。”

3、socket的基本操作
既然socket是“open—write/read—close”模式的一种实现，那么socket就提供了这些操作对应的函数接口。下面以TCP为例，介绍几个基本的socket接口函数。

3.1、socket()函数
int socket(int domain, int type, int protocol);
socket函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字，而socket()用于创建一个socket描述符（socket descriptor），它唯一标识一个socket。这个socket描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。

正如可以给fopen的传入不同参数值，以打开不同的文件。创建socket的时候，也可以指定不同的参数创建不同的socket描述符，socket函数的三个参数分别为：

domain：即协议域，又称为协议族（family）。常用的协议族有，AF_INET、AF_INET6、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。
type：指定socket类型。常用的socket类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等（socket的类型有哪些？）。
protocol：故名思意，就是指定协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议（这个协议我将会单独开篇讨论！）。
注意：并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。当protocol为0时，会自动选择type类型对应的默认协议。

当我们调用socket创建一个socket时，返回的socket描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用bind()函数，否则就当调用connect()、listen()时系统会自动随机分配一个端口。

3.2、bind()函数
正如上面所说bind()函数把一个地址族中的特定地址赋给socket。例如对应AF_INET、AF_INET6就是把一个ipv4或ipv6地址和端口号组合赋给socket。

int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
函数的三个参数分别为：

sockfd：即socket描述字，它是通过socket()函数创建了，唯一标识一个socket。bind()函数就是将给这个描述字绑定一个名字。
addr：一个const struct sockaddr *指针，指向要绑定给sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同，如ipv4对应的是： 
struct sockaddr_in {
    sa_family_t    sin_family; /* address family: AF_INET */
    in_port_t      sin_port;   /* port in network byte order */
    struct in_addr sin_addr;   /* internet address */
};

/* Internet address. */
struct in_addr {
    uint32_t       s_addr;     /* address in network byte order */
};
ipv6对应的是： 
struct sockaddr_in6 { 
    sa_family_t     sin6_family;   /* AF_INET6 */ 
    in_port_t       sin6_port;     /* port number */ 
    uint32_t        sin6_flowinfo; /* IPv6 flow information */ 
    struct in6_addr sin6_addr;     /* IPv6 address */ 
    uint32_t        sin6_scope_id; /* Scope ID (new in 2.4) */ 
};

struct in6_addr { 
    unsigned char   s6_addr[16];   /* IPv6 address */ 
};
Unix域对应的是： 
#define UNIX_PATH_MAX    108

struct sockaddr_un { 
    sa_family_t sun_family;               /* AF_UNIX */ 
    char        sun_path[UNIX_PATH_MAX];  /* pathname */ 
};
addrlen：对应的是地址的长度。
通常服务器在启动的时候都会绑定一个众所周知的地址（如ip地址+端口号），用于提供服务，客户就可以通过它来接连服务器；而客户端就不用指定，有系统自动分配一个端口号和自身的ip地址组合。这就是为什么通常服务器端在listen之前会调用bind()，而客户端就不会调用，而是在connect()时由系统随机生成一个。

网络字节序与主机字节序
主机字节序就是我们平常说的大端和小端模式：不同的CPU有不同的字节序类型，这些字节序是指整数在内存中保存的顺序，这个叫做主机序。引用标准的Big-Endian和Little-Endian的定义如下：

　　a) Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。

　　b) Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。

网络字节序：4个字节的32 bit值以下面的次序传输：首先是0～7bit，其次8～15bit，然后16～23bit，最后是24~31bit。这种传输次序称作大端字节序。由于TCP/IP首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，一个字节的数据没有顺序的问题了。

所以：在将一个地址绑定到socket的时候，请先将主机字节序转换成为网络字节序，而不要假定主机字节序跟网络字节序一样使用的是Big-Endian。由于这个问题曾引发过血案！公司项目代码中由于存在这个问题，导致了很多莫名其妙的问题，所以请谨记对主机字节序不要做任何假定，务必将其转化为网络字节序再赋给socket。

3.3、listen()、connect()函数
如果作为一个服务器，在调用socket()、bind()之后就会调用listen()来监听这个socket，如果客户端这时调用connect()发出连接请求，服务器端就会接收到这个请求。

int listen(int sockfd, int backlog);
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
listen函数的第一个参数即为要监听的socket描述字，第二个参数为相应socket可以排队的最大连接个数。socket()函数创建的socket默认是一个主动类型的，listen函数将socket变为被动类型的，等待客户的连接请求。

connect函数的第一个参数即为客户端的socket描述字，第二参数为服务器的socket地址，第三个参数为socket地址的长度。客户端通过调用connect函数来建立与TCP服务器的连接。

3.4、accept()函数
TCP服务器端依次调用socket()、bind()、listen()之后，就会监听指定的socket地址了。TCP客户端依次调用socket()、connect()之后就想TCP服务器发送了一个连接请求。TCP服务器监听到这个请求之后，就会调用accept()函数取接收请求，这样连接就建立好了。之后就可以开始网络I/O操作了，即类同于普通文件的读写I/O操作。

int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
accept函数的第一个参数为服务器的socket描述字，第二个参数为指向struct sockaddr *的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。如果accpet成功，那么其返回值是由内核自动生成的一个全新的描述字，代表与返回客户的TCP连接。

注意：accept的第一个参数为服务器的socket描述字，是服务器开始调用socket()函数生成的，称为监听socket描述字；而accept函数返回的是已连接的socket描述字。一个服务器通常通常仅仅只创建一个监听socket描述字，它在该服务器的生命周期内一直存在。内核为每个由服务器进程接受的客户连接创建了一个已连接socket描述字，当服务器完成了对某个客户的服务，相应的已连接socket描述字就被关闭。

3.5、read()、write()等函数
万事具备只欠东风，至此服务器与客户已经建立好连接了。可以调用网络I/O进行读写操作了，即实现了网咯中不同进程之间的通信！网络I/O操作有下面几组：

read()/write()
recv()/send()
readv()/writev()
recvmsg()/sendmsg()
recvfrom()/sendto()
我推荐使用recvmsg()/sendmsg()函数，这两个函数是最通用的I/O函数，实际上可以把上面的其它函数都替换成这两个函数。它们的声明如下：

       #include <unistd.h>

       ssize_t read(int fd, void *buf, size_t count);
       ssize_t write(int fd, const void *buf, size_t count);

       #include <sys/types.h>
       #include <sys/socket.h>

       ssize_t send(int sockfd, const void *buf, size_t len, int flags);
       ssize_t recv(int sockfd, void *buf, size_t len, int flags);

       ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
                      const struct sockaddr *dest_addr, socklen_t addrlen);
       ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
                        struct sockaddr *src_addr, socklen_t *addrlen);

       ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);
       ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
read函数是负责从fd中读取内容.当读成功时，read返回实际所读的字节数，如果返回的值是0表示已经读到文件的结束了，小于0表示出现了错误。如果错误为EINTR说明读是由中断引起的，如果是ECONNREST表示网络连接出了问题。

write函数将buf中的nbytes字节内容写入文件描述符fd.成功时返回写的字节数。失败时返回-1，并设置errno变量。 在网络程序中，当我们向套接字文件描述符写时有俩种可能。1)write的返回值大于0，表示写了部分或者是全部的数据。2)返回的值小于0，此时出现了错误。我们要根据错误类型来处理。如果错误为EINTR表示在写的时候出现了中断错误。如果为EPIPE表示网络连接出现了问题(对方已经关闭了连接)。

其它的我就不一一介绍这几对I/O函数了，具体参见man文档或者baidu、Google，下面的例子中将使用到send/recv。

3.6、close()函数
在服务器与客户端建立连接之后，会进行一些读写操作，完成了读写操作就要关闭相应的socket描述字，好比操作完打开的文件要调用fclose关闭打开的文件。

#include <unistd.h>
int close(int fd);
close一个TCP socket的缺省行为时把该socket标记为以关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为read或write的第一个参数。

注意：close操作只是使相应socket描述字的引用计数-1，只有当引用计数为0的时候，才会触发TCP客户端向服务器发送终止连接请求。

4、socket中TCP的三次握手建立连接详解